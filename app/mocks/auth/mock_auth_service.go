// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/currency-conversion-service/app/auth (interfaces: AuthService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/eneskzlcn/currency-conversion-service/app/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ExtractUserIDFromToken mocks base method.
func (m *MockAuthService) ExtractUserIDFromToken(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractUserIDFromToken", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractUserIDFromToken indicates an expected call of ExtractUserIDFromToken.
func (mr *MockAuthServiceMockRecorder) ExtractUserIDFromToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractUserIDFromToken", reflect.TypeOf((*MockAuthService)(nil).ExtractUserIDFromToken), arg0)
}

// Tokenize mocks base method.
func (m *MockAuthService) Tokenize(arg0 context.Context, arg1 auth.LoginRequest) (auth.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tokenize", arg0, arg1)
	ret0, _ := ret[0].(auth.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tokenize indicates an expected call of Tokenize.
func (mr *MockAuthServiceMockRecorder) Tokenize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tokenize", reflect.TypeOf((*MockAuthService)(nil).Tokenize), arg0, arg1)
}

// ValidateToken mocks base method.
func (m *MockAuthService) ValidateToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceMockRecorder) ValidateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthService)(nil).ValidateToken), arg0, arg1)
}
