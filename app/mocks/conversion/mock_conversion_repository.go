// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/currency-conversion-service/app/conversion (interfaces: ConversionRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	conversion "github.com/eneskzlcn/currency-conversion-service/app/conversion"
	entity "github.com/eneskzlcn/currency-conversion-service/app/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockConversionRepository is a mock of ConversionRepository interface.
type MockConversionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConversionRepositoryMockRecorder
}

// MockConversionRepositoryMockRecorder is the mock recorder for MockConversionRepository.
type MockConversionRepositoryMockRecorder struct {
	mock *MockConversionRepository
}

// NewMockConversionRepository creates a new mock instance.
func NewMockConversionRepository(ctrl *gomock.Controller) *MockConversionRepository {
	mock := &MockConversionRepository{ctrl: ctrl}
	mock.recorder = &MockConversionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversionRepository) EXPECT() *MockConversionRepositoryMockRecorder {
	return m.recorder
}

// GetUserActiveExchangeOffer mocks base method.
func (m *MockConversionRepository) GetUserActiveExchangeOffer(arg0 context.Context, arg1 conversion.UserActiveExchangeOfferDTO) (entity.UserActiveExchangeOffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserActiveExchangeOffer", arg0, arg1)
	ret0, _ := ret[0].(entity.UserActiveExchangeOffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserActiveExchangeOffer indicates an expected call of GetUserActiveExchangeOffer.
func (mr *MockConversionRepositoryMockRecorder) GetUserActiveExchangeOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserActiveExchangeOffer", reflect.TypeOf((*MockConversionRepository)(nil).GetUserActiveExchangeOffer), arg0, arg1)
}
