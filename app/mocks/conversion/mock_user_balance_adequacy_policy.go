// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/currency-conversion-service/app/conversion (interfaces: UserBalanceAdequacyPolicy)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserBalanceAdequacyPolicy is a mock of UserBalanceAdequacyPolicy interface.
type MockUserBalanceAdequacyPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockUserBalanceAdequacyPolicyMockRecorder
}

// MockUserBalanceAdequacyPolicyMockRecorder is the mock recorder for MockUserBalanceAdequacyPolicy.
type MockUserBalanceAdequacyPolicyMockRecorder struct {
	mock *MockUserBalanceAdequacyPolicy
}

// NewMockUserBalanceAdequacyPolicy creates a new mock instance.
func NewMockUserBalanceAdequacyPolicy(ctrl *gomock.Controller) *MockUserBalanceAdequacyPolicy {
	mock := &MockUserBalanceAdequacyPolicy{ctrl: ctrl}
	mock.recorder = &MockUserBalanceAdequacyPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBalanceAdequacyPolicy) EXPECT() *MockUserBalanceAdequacyPolicyMockRecorder {
	return m.recorder
}

// IsAllowed mocks base method.
func (m *MockUserBalanceAdequacyPolicy) IsAllowed(arg0, arg1 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllowed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAllowed indicates an expected call of IsAllowed.
func (mr *MockUserBalanceAdequacyPolicyMockRecorder) IsAllowed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockUserBalanceAdequacyPolicy)(nil).IsAllowed), arg0, arg1)
}
