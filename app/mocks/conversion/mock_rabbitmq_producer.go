// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/currency-conversion-service/app/conversion (interfaces: RabbitmqProducer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/eneskzlcn/currency-conversion-service/app/message"
	gomock "github.com/golang/mock/gomock"
)

// MockRabbitmqProducer is a mock of RabbitmqProducer interface.
type MockRabbitmqProducer struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitmqProducerMockRecorder
}

// MockRabbitmqProducerMockRecorder is the mock recorder for MockRabbitmqProducer.
type MockRabbitmqProducerMockRecorder struct {
	mock *MockRabbitmqProducer
}

// NewMockRabbitmqProducer creates a new mock instance.
func NewMockRabbitmqProducer(ctrl *gomock.Controller) *MockRabbitmqProducer {
	mock := &MockRabbitmqProducer{ctrl: ctrl}
	mock.recorder = &MockRabbitmqProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitmqProducer) EXPECT() *MockRabbitmqProducerMockRecorder {
	return m.recorder
}

// PushConversionCreatedMessage mocks base method.
func (m *MockRabbitmqProducer) PushConversionCreatedMessage(arg0 message.CurrencyConvertedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushConversionCreatedMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushConversionCreatedMessage indicates an expected call of PushConversionCreatedMessage.
func (mr *MockRabbitmqProducerMockRecorder) PushConversionCreatedMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushConversionCreatedMessage", reflect.TypeOf((*MockRabbitmqProducer)(nil).PushConversionCreatedMessage), arg0)
}
