// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/currency-conversion-service/app/conversion (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	conversion "github.com/eneskzlcn/currency-conversion-service/app/conversion"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ConvertCurrencies mocks base method.
func (m *MockService) ConvertCurrencies(arg0 context.Context, arg1 int, arg2 conversion.CurrencyConversionOfferRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertCurrencies", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertCurrencies indicates an expected call of ConvertCurrencies.
func (mr *MockServiceMockRecorder) ConvertCurrencies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertCurrencies", reflect.TypeOf((*MockService)(nil).ConvertCurrencies), arg0, arg1, arg2)
}
