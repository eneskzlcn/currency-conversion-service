// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eneskzlcn/currency-conversion-service/internal/wallet (interfaces: WalletRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/eneskzlcn/currency-conversion-service/app/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// AdjustUserBalanceOnGivenCurrency mocks base method.
func (m *MockWalletRepository) AdjustUserBalanceOnGivenCurrency(arg0 context.Context, arg1 int, arg2 string, arg3 float32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdjustUserBalanceOnGivenCurrency", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdjustUserBalanceOnGivenCurrency indicates an expected call of AdjustUserBalanceOnGivenCurrency.
func (mr *MockWalletRepositoryMockRecorder) AdjustUserBalanceOnGivenCurrency(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdjustUserBalanceOnGivenCurrency", reflect.TypeOf((*MockWalletRepository)(nil).AdjustUserBalanceOnGivenCurrency), arg0, arg1, arg2, arg3)
}

// GetUserBalanceOnGivenCurrency mocks base method.
func (m *MockWalletRepository) GetUserBalanceOnGivenCurrency(arg0 context.Context, arg1 int, arg2 string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalanceOnGivenCurrency", arg0, arg1, arg2)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalanceOnGivenCurrency indicates an expected call of GetUserBalanceOnGivenCurrency.
func (mr *MockWalletRepositoryMockRecorder) GetUserBalanceOnGivenCurrency(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalanceOnGivenCurrency", reflect.TypeOf((*MockWalletRepository)(nil).GetUserBalanceOnGivenCurrency), arg0, arg1, arg2)
}

// GetUserWalletAccounts mocks base method.
func (m *MockWalletRepository) GetUserWalletAccounts(arg0 context.Context, arg1 int) ([]entity.UserWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWalletAccounts", arg0, arg1)
	ret0, _ := ret[0].([]entity.UserWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWalletAccounts indicates an expected call of GetUserWalletAccounts.
func (mr *MockWalletRepositoryMockRecorder) GetUserWalletAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWalletAccounts", reflect.TypeOf((*MockWalletRepository)(nil).GetUserWalletAccounts), arg0, arg1)
}

// IsUserWithUserIDExists mocks base method.
func (m *MockWalletRepository) IsUserWithUserIDExists(arg0 context.Context, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserWithUserIDExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserWithUserIDExists indicates an expected call of IsUserWithUserIDExists.
func (mr *MockWalletRepositoryMockRecorder) IsUserWithUserIDExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserWithUserIDExists", reflect.TypeOf((*MockWalletRepository)(nil).IsUserWithUserIDExists), arg0, arg1)
}
